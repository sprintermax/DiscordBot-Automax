'use strict';

// WIP | TEST COMMAND

import DiscordJS from 'discord.js';
import fetch from 'node-fetch';

import { UpdateComponents, FindDefaultMenuOption } from '../../utils/MessageComponentActions.js';

export default {
	scope: 'guild',
	data: {
		name: 'fnstats',
		description: 'Mostra estat√≠sticas do Fortnite de um jogador',
		options: [
			{
				name: 'player',
				type: 'STRING',
				description: 'O jogador para rastrear as estat√≠sticas',
				required: true
			},
			{
				name: 'platform',
				type: 'STRING',
				description: 'O jogador para rastrear as estat√≠sticas',
				choices: [
					{
						name: "Epic",
						value: "epic",
						emoji: '670850632038744075'
					},
					{
						name: "Xbox",
						value: "xbl",
						emoji: '532685876975894548'
					},
					{
						name: "Playstation",
						value: "psn",
						emoji: '532685915395588097'
					}
				]
			}
		]
	},
	async run({ Client, Interaction }) {
		await Interaction.deferReply();
		const player = Interaction.options.getString('player');
		const accountType = Interaction.options.getString('platform') || 'epic';
		await Client.channels.fetch(Interaction.channelId);
		let lastimage;
		const msg = await Interaction.editReply({
			content: `Estat√≠sticas de **${player}**`,
			components: [
				{
					type: 'ACTION_ROW',
					components: [
						{
							type: 'SELECT_MENU',
							custom_id: 'image',
							placeholder: 'Selecione um Perif√©rico',
							options: [
								{
									label: 'Todos',
									description: 'Estat√≠sticas somadas de todos os M√©todos de Entrada',
									value: 'all',
									emoji: '‚≠ê',
									default: true
								},
								{
									label: 'Mouse e Teclado',
									description: 'Estat√≠sticas salvas ao jogar com Teclado e Mouse',
									value: 'keyboardMouse',
									emoji: '‚å®Ô∏è'
								},
								{
									label: 'Controle',
									description: 'Estat√≠sticas salvas ao jogar com Controle',
									value: 'gamepad',
									emoji: 'üéÆ'
								},
								{
									label: 'Toque',
									description: 'Estat√≠sticas salvas ao jogar com Touchscreen',
									value: 'touch',
									emoji: 'üì±'
								}
							]
						}
					]
				},
				{
					type: 'ACTION_ROW',
					components: [
						{
							type: 'SELECT_MENU',
							custom_id: 'timewindow',
							placeholder: 'Selecione um Per√≠odo de Tempo',
							options: [
								{
									label: 'Nenhum',
									description: 'Exibir estat√≠sticas desde a cria√ß√£o da conta',
									value: 'lifetime',
									emoji: '‚≠ê',
									default: true
								},
								{
									label: 'Temporada Atual',
									description: 'Exibir estat√≠sticas salvas durante a Temporada atual',
									value: 'season',
									emoji: '731314508730990603'
								}
							]
						}
					]
				}
				// {
				// 	type: 'ACTION_ROW',
				// 	components: [
				// 		{
				// 			type: 'BUTTON',
				// 			label: 'Todos',
				// 			style: 'SUCCESS',
				// 			custom_id: 'image_all',
				// 			emoji: '‚≠ê',
				// 			disabled: true
				// 		},
				// 		{
				// 			type: 'BUTTON',
				// 			label: 'Mouse e Teclado',
				// 			style: 'SUCCESS',
				// 			custom_id: 'image_keyboardMouse',
				// 			emoji: '‚å®Ô∏è'
				// 		},
				// 		{
				// 			type: 'BUTTON',
				// 			label: 'Controle',
				// 			style: 'SUCCESS',
				// 			custom_id: 'image_gamepad',
				// 			emoji: 'üéÆ'
				// 		},
				// 		{
				// 			type: 'BUTTON',
				// 			label: 'Toque',
				// 			style: 'SUCCESS',
				// 			custom_id: 'image_touch',
				// 			emoji: 'üì±'
				// 		}
				// 	]
				// },
				// {
				// 	type: 'ACTION_ROW',
				// 	components: [
				// 		{
				// 			type: 'BUTTON',
				// 			label: 'Sempre',
				// 			style: 'PRIMARY',
				// 			custom_id: 'timewindow_lifetime',
				// 			emoji: '‚≠ê',
				// 			disabled: true
				// 		},
				// 		{
				// 			type: 'BUTTON',
				// 			label: 'Temporada Atual',
				// 			style: 'PRIMARY',
				// 			custom_id: 'timewindow_season',
				// 			emoji: '731314508730990603'
				// 		}
				// 	]
				// }
			],
			embeds: [StatsEmbed(await GetPlayerStatsImage(), true)]
		});
		const collector = msg.createMessageComponentCollector({ idle: 30000 });

		collector.on('collect', async i => {
			if (i.user.id !== Interaction.user.id) return i.reply({ content: 'Voc√™ n√£o pode alterar op√ß√µes do comando de outro usu√°rio.', ephemeral: true });
			await i.update({
				components: UpdateComponents(i.message.components, 'MIXED', i),
				embeds: [StatsEmbed('', true)]
			});
			UpdateStatsMessage(i, msg.components);
		});
		collector.on('end', (c, r) => {
			if (r !== 'messageDelete') Interaction.editReply({ components: [] });
		});

		async function GetPlayerStatsImage(idata) {
			const timeWindow = idata ? FindDefaultMenuOption(idata, 'timewindow') : 'lifetime';
			const image = idata ? FindDefaultMenuOption(idata, 'image') : 'all';
			return await fetch(`https://fortnite-api.com/v2/stats/br/v2?name=${encodeURI(player)}&image=${image}&accountType=${accountType}&timeWindow=${timeWindow}`).then(res => res.json());
		}

		async function UpdateStatsMessage(i, components) {
			i.editReply({
				components: UpdateComponents(components, 'LOAD_OPTIONS', i),
				embeds: [StatsEmbed(await GetPlayerStatsImage(components))]
			})
		}

		function StatsEmbed(request, loading) {
			const embed = new DiscordJS.MessageEmbed()
				.setColor('#000000')
				.setFooter(`${Interaction.guild?.name || Client.user.username}`, Interaction.guild?.iconURL() || Client.user.avatarURL() || '')
				.setTimestamp()
			if (request?.status === 200) {
				lastimage = request.data.image;
				embed.setImage(lastimage);
			} else if (loading) {
				embed
					.setDescription('Aguarde, estou atualizando as informa√ß√µes...')
					.setImage(lastimage)

			} else if (request?.status !== 200 || !request) {
				embed
					.setTitle('Oops!')
					.setDescription('Um erro ocorreu!\nN√£o consegui encontrar nenhuma estat√≠stica.')
			}
			return embed
		}
	}
}

